//
//  ContentView.swift
//  MyMetal
//
//  Created by Yauheni Kozich on 29.10.24.
//

import SwiftUI
import MetalKit

/// SwiftUI view –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Metal-—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫—É–±–∞
struct CubeMetalView: UIViewRepresentable {
    /// Sensitivity for converting pan distance -> rotation angle (radians per point)
    var rotationSensitivity: Float = 0.005

    /// Sensitivity for converting pan velocity -> impulse rotation (radians per point/second)
    var velocitySensitivity: Float = 0.0001
    
    // MARK: - UIViewRepresentable Implementation
    
    /// –°–æ–∑–¥–∞–Ω–∏–µ MTKView –¥–ª—è Metal —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    /// - Parameter context: –ö–æ–Ω—Ç–µ–∫—Å—Ç SwiftUI
    /// - Returns: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π MTKView
    func makeUIView(context: Context) -> MTKView {
        print("üöÄ Creating Metal view...")
        
        guard let device = MTLCreateSystemDefaultDevice() else {
            print("‚ùå Metal is not supported on this device")
            fatalError("Metal is not supported on this device")
        }
        
        print("‚úÖ Metal device created: \(device.name)")

        let metalView = MTKView(frame: .zero, device: device)
        
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –∂–µ—Å—Ç–æ–≤
    let panGesture = UIPanGestureRecognizer(target: context.coordinator, action: #selector(CoordinatorWrapper.handlePan(_:)))
        metalView.addGestureRecognizer(panGesture)

    // –ü–µ—Ä–µ–¥–∞—ë–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É
    context.coordinator.rotationSensitivity = rotationSensitivity
    context.coordinator.velocitySensitivity = velocitySensitivity
        
        do {
            configureMetalView(metalView)
            print("‚úÖ Metal view configured")
            
            try setupRenderer(for: metalView, context: context)
            print("‚úÖ Renderer setup complete")
        } catch {
            print("‚ùå Error during setup: \(error)")
            fatalError("Setup failed: \(error)")
        }

        print("‚úÖ Metal view setup complete")
        return metalView
    }

    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ view (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Metal —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞)
    /// - Parameters:
    ///   - uiView: MTKView –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    ///   - context: –ö–æ–Ω—Ç–µ–∫—Å—Ç SwiftUI
    func updateUIView(_ uiView: MTKView, context: Context) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        context.coordinator.rotationSensitivity = rotationSensitivity
        context.coordinator.velocitySensitivity = velocitySensitivity
    }

    /// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è renderer'–æ–º
    /// - Returns: CoordinatorWrapper –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è renderer'–∞
    func makeCoordinator() -> CoordinatorWrapper {
        return CoordinatorWrapper()
    }
    
    // MARK: - Private Methods
    
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Metal view
    /// - Parameter metalView: MTKView –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    private func configureMetalView(_ metalView: MTKView) {
        metalView.clearColor = MTLClearColorMake(0.1, 0.1, 0.1, 1.0)
        metalView.colorPixelFormat = .bgra8Unorm
        metalView.depthStencilPixelFormat = .depth32Float
        metalView.preferredFramesPerSecond = 120
        metalView.enableSetNeedsDisplay = false // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
    }
    
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ renderer'–∞ –¥–ª—è Metal view
    /// - Parameters:
    ///   - metalView: MTKView –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    ///   - context: –ö–æ–Ω—Ç–µ–∫—Å—Ç SwiftUI
    private func setupRenderer(for metalView: MTKView, context: Context) throws {
        print("üîß Setting up renderer...")
        
        do {
            let renderer = try CubeRenderer(metalView: metalView)
            print("‚úÖ Renderer created")
            
            metalView.delegate = renderer
            print("‚úÖ Delegate set")
            
            context.coordinator.renderer = renderer
            print("‚úÖ Coordinator updated")
        } catch {
            print("‚ùå Renderer setup failed: \(error)")
            throw error
        }
    }
}



// MARK: - Coordinator

/// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Metal renderer'–æ–º
class CoordinatorWrapper {
    /// Renderer –¥–ª—è Metal —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    var renderer: CubeRenderer!
    private var lastPanLocation: CGPoint = .zero
    /// Sensitivity configurable from the SwiftUI wrapper
    var rotationSensitivity: Float = 0.005
    var velocitySensitivity: Float = 0.0001
    
    @objc func handlePan(_ gesture: UIPanGestureRecognizer) {
        switch gesture.state {
        case .began:
            lastPanLocation = gesture.location(in: gesture.view)
            
        case .changed:
            let currentLocation = gesture.location(in: gesture.view)
            let delta = CGPoint(
                x: currentLocation.x - lastPanLocation.x,
                y: currentLocation.y - lastPanLocation.y
            )
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —É–≥–ª—ã –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            let deltaX = Float(delta.x) * rotationSensitivity
            let deltaY = Float(delta.y) * rotationSensitivity

            renderer.rotateX(deltaY)
            renderer.rotateY(deltaX)
            
            lastPanLocation = currentLocation
            
        case .ended:
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –ø–∞–ª—å—Ü–∞ –¥–ª—è –∏–Ω–µ—Ä—Ü–∏–∏
            let velocity = gesture.velocity(in: gesture.view)

            // –ú–∞—Å—à—Ç–∞–± –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–∞–ª—å—Ü–∞ –≤ –∏–º–ø—É–ª—å—Å –≤—Ä–∞—â–µ–Ω–∏—è
            renderer.rotateX(Float(velocity.y) * velocitySensitivity)
            renderer.rotateY(Float(velocity.x) * velocitySensitivity)
            
        default:
            break
        }
    }
    
    deinit {
        // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        renderer?.cleanupResources()  // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏
        renderer = nil
    }
}
